//1. Swapping two variable using third variable.
# include <iostream>
using namespace std;
int main()
{
    int a = 5;
    cout<<"Initially a = "<<a<<endl;
    int b = 7;
    cout<<"Initially b = "<<b<<endl;
    int c;
    c = a;
    a = b;
    b = c;
    cout<<"Ftinally a = "<<a<<endl;
    cout<<"Finally b = "<<b<<endl;
}


//2. Calling a function by value , pointer and refrence.
#include<iostream>
using namespace std;

//Function for call by value
int square1( int num)
{
    return num * num;
}

//Function for call by pointer
int square2(int *num)
{
    return (*num) * (*num);
}

//Function for call by refrence
int square3(int &num)
{
    return num*num;
}

int main() 
{
    int num;
    int result;
    cout<<"Enter a number : ";
    cin>>num;
    
    // call by value
    result = square1(num);
    cout<<"Square by value : "<<result<<endl;
    
    //call by pointer
    result = square2(&num);
    cout<<"Square by ponter : "<<result<<endl;
    
    //call by refrence
    result = square3(num);
    cout<<"Square by refrence : "<<result<<endl;
    
    return 0;
}



//3. Code to show the use of inline function
#include<iostream>
using namespace std;
inline int square(int x) 
{
    return x * x;
}

int main() {
    int number = 5;
    int result = square(number);
    cout <<"Original number: "<<number<<endl;
    cout << "Square of the number using inline function: " <<result<<endl;
    return 0;
}



//4. Code to show the concept the storage variable.
#include <iostream>
using namespace std;
//Global variable
extern int a = 7;
int main()
{
    cout<<"Global a = "<<a<<endl;
    
    //static variable
    static int b = 5;
    cout<<"static b = "<<b<<endl;
    
    //local variable
    int c = 7;
    cout<<"local c = "<<c<<endl;
    
    //register variable
    register int d = 9;
    cout<<"register d = "<<endl;
    
    return 0;
}



//5. Star pyramid 
#include <iostream>
using namespace std;

int main() 
{
  int rows = 5;
  for (int i = 1; i <= rows; ++i) 
  {
    for (int j = rows - i; j > 0; --j) 
    {
        cout << " ";
    }

    for (int k = 1; k <= 2 * i - 1; ++k) 
    {
      cout << "*";
    }
    cout <<endl;
  }
  return 0;
}




//6.  Code to show the concept of default arguments
#include <iostream>
using namespace std;

// Function to calculate the area of a rectangle with default arguments
double calculateRectangleArea(double length = 1.0, double width = 1.0) {
    return length * width;
}

int main() {
    // Calling the function without specifying arguments (uses default values)
    double defaultArea = calculateRectangleArea();
    std::cout << "Default Area: " << defaultArea << std::endl;

    // Calling the function with specific arguments
    double customArea = calculateRectangleArea(5.0, 3.0);
    std::cout << "Custom Area: " << customArea << std::endl;

    return 0;
}





//7. Code to add and substract two matcies.
#include<iostream>
using namespace std;
int main() 
{
    int n1[5] = {1,2,3,4,5};
    int n2[5] = {2,4,6,8,10};
    
    int sum[4];
    int diff[4];
    
    for (int i = 0 ; i < 5 ; i++)
    {
        sum[i] = n1[i] + n2[i];
    }
    cout<<"Sum of matrices : ";
    for (int i = 0 ; i<5 ; i++)
    {
        cout<<sum[i]<<" ";
    }
    cout<<endl;
    
    for (int i = 0 ; i < 5 ;i++)
    {
        diff[i] = n1[i] - n2[i];
    }
    cout<<"Diffrence of (mtrix1 - matrix2): ";
    for (int i = 0; i < 5 ; i++)
    {
        cout<<diff[i]<<" ";
    }
    
    return 0;
}



//11. Single level inheritance
# include <iostream>
using namespace std;
class vechile
{
    public:
        int number;
        vechile()
        {
            cout<<"Super car.";
        }
};

class car : public vechile
{
    
};
int main()
{
    car c1;
    return 0;
}
